import React, { useState } from 'react';
import { Stage, Layer, Image } from 'react-konva';
import Konva from 'konva';
import useImage from './hooks/useImage';
import './App.css';

const RecolorTool = () => {
  const imageUrl = `${process.env.PUBLIC_URL}/example-image.png`;
  const [image] = useImage(imageUrl);
  const [hue, setHue] = useState(0);
  const [brightness, setBrightness] = useState(0);
  const [contrast, setContrast] = useState(0);

  if (!image) {
    return <p>Loading image...</p>;
  }

  return (
    <div className="editor">
      <h1>Recolor Your Clothes!</h1>
      <div className="controls">
        <label>Hue</label>
        <input type="range" min="-180" max="180" value={hue} onChange={(e) => setHue(Number(e.target.value))} />
        <label>Brightness</label>
        <input type="range" min="-1" max="1" step="0.1" value={brightness} onChange={(e) => setBrightness(Number(e.target.value))} />
        <label>Contrast</label>
        <input type="range" min="-1" max="1" step="0.1" value={contrast} onChange={(e) => setContrast(Number(e.target.value))} />
      </div>
      <Stage width={500} height={500} className="canvas">
        <Layer>
          <Image
            image={image}
            filters={[Konva.Filters.HSL, Konva.Filters.Brighten, Konva.Filters.Contrast]}
            hue={hue}
            brightness={brightness}
            contrast={contrast}
            ref={(node) => {
              if (node) {
                node.cache(); // Isso melhora o desempenho dos filtros
                node.getLayer().batchDraw();
              }
            }}
          />
        </Layer>
      </Stage>
      <button
        onClick={() => {
          const uri = document.querySelector('canvas').toDataURL();
          const link = document.createElement('a');
          link.download = 'edited-image.png';
          link.href = uri;
          link.click();
        }}
      >
        Download Image
      </button>
    </div>
  );
};

export default RecolorTool;

